# -*- coding: utf-8 -*-
"""Copy of Targets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bqzy7eqKcMh7KYLKqoGBEFaHE7RFnGZr
"""

from google.colab import files


uploaded = files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

df = pd.read_csv("Targets.csv")

import pandas as pd

# Load the CSV file into a Pandas DataFrame
df = pd.read_csv("Targets.csv")

# Fill missing values in the 'attack_cat' column with 'Normal'
df['attack_cat'].fillna('Normal', inplace=True)

# Save the DataFrame back to a CSV file
df.to_csv("Targets.csv", index=False)

# Assuming the first 11 columns are features, 'Label' is the binary target variable,
# and 'attack_cat' is the multi-class target variable
X = df.iloc[:, :-2]  # Features
y_binary = df['Label']  # Binary Labels
y_multi_class = df['attack_cat']  # Multi-class Labels

# Step 2: Model selection (for binary classification)
binary_model = RandomForestClassifier(n_estimators=100, random_state=42)

X_train, X_test, y_train_binary, y_test_binary = train_test_split(X, y_binary, test_size=0.2, random_state=42)

binary_model.fit(X_train, y_train_binary)

y_pred_binary = binary_model.predict(X_test)
accuracy_binary = accuracy_score(y_test_binary, y_pred_binary)
report_binary = classification_report(y_test_binary, y_pred_binary)

print("Binary Classification Model:")
print("Accuracy:", accuracy_binary)
print("Classification Report:\n", report_binary)

input_data = [254, 2, 65142856, 0, 114, 10, 66, 3,0, 0, 1]

input_data = [input_data]

# Predict the binary probability
probability_score_binary = binary_model.predict_proba(input_data)[:, 1]

print(f"Binary Probability Score for the Input Data: {probability_score_binary[0]}")

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

multi_class_model = RandomForestClassifier(n_estimators=100, random_state=42)

X_train_multi, X_test_multi, y_train_multi, y_test_multi = train_test_split(X, y_multi_class, test_size=0.2, random_state=42)

multi_class_model.fit(X_train_multi, y_train_multi)

# Step 4: Model evaluation (for multi-class classification)
y_pred_multi = multi_class_model.predict(X_test_multi)
accuracy_multi = accuracy_score(y_test_multi, y_pred_multi)
report_multi = classification_report(y_test_multi, y_pred_multi)

print("Multi-Class Classification Model:")
print("Accuracy:", accuracy_multi)
print("Classification Report:\n", report_multi)

input_data_multi = [254, 2, 65142856, 0, 114, 10, 66, 3,0, 0, 1]

input_data_multi = [input_data_multi]

probability_distribution_multi = multi_class_model.predict_proba(input_data_multi)

print("Multi-Class Probability Distribution for the Input Data:")
for i, attack_type in enumerate(multi_class_model.classes_):
    print(f"Attack Type: {attack_type}, Probability: {probability_distribution_multi[0][i]}")

input_data_multi = [254, 1, 346366.8, 10228.89, 8168, 1, 66, 1,0.054878, 3.59E+09, 2.51E+09]

input_data_multi = [input_data_multi]

probability_distribution_multi = multi_class_model.predict_proba(input_data_multi)

print("Multi-Class Probability Distribution for the Input Data:")
for i, attack_type in enumerate(multi_class_model.classes_):
    print(f"Attack Type: {attack_type}, Probability: {probability_distribution_multi[0][i]}")




import matplotlib.pyplot as plt

# Data from your output
#attack_types = ["Fuzzers", "Analysis", "Backdoors", "DoS", "Exploits", "Generic", "Normal", "Reconnaissance", "Shellcode", "Worms"]
#probabilities = [0.0, 0.0, 0.0, 0.02, 0.93, 0.05, 0.0, 0.0, 0.0, 0.0]

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(attack_type, probability_distribution_multi[0][i])
plt.xlabel("Attack Type")
plt.ylabel("Probability")
plt.title("Multi-Class Probability Distribution for the Input Data")
plt.xticks(rotation=45, ha="right")

# Show the chart
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

import matplotlib.pyplot as plt

# Data from your output
attack_types = ["Fuzzers", "Analysis", "Backdoors", "DoS", "Exploits", "Generic", "Normal", "Reconnaissance", "Shellcode", "Worms"]
probabilities = [0.0, 0.0, 0.0, 0.02, 0.93, 0.05, 0.0, 0.0, 0.0, 0.0]

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(attack_types, probabilities)
plt.xlabel("Attack Type")
plt.ylabel("Probability")
plt.title("Multi-Class Probability Distribution for the Input Data")
plt.xticks(rotation=45, ha="right")

# Show the chart
plt.tight_layout()
plt.show()

